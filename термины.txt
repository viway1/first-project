ТЕРМИНЫ:
GUI - Graphical User Interface - графический интерфейс
CLI - Command-line Interface - Командная строка
cd - change directory - Сменить текущую директорию
pwd - print working directory - Вывести на экран текущую рабочую директорию
ls - list directory contents - Напечатать содержимое директории со скрытыми файлами
touch - коснуться
mkdir - make directory — Создать директорию
cp - copy - копировать
mv - move - переместить
cat - concatenate and print - объединить и распечатать
rm - remove — удалить
rmdir - remove directory — удалить директорию
rm -r -r — recursive рекурсивный
--list - список
URL - Uniform Resource Locator - (англ. «унифицированный указатель ресурса») — формат записи ссылок на какой-либо ресурс в интернете.
echo - эхо
Среда разработки — это программа, которая помогает редактировать код, подсвечивает потенциальные ошибки в нём, позволяет запускать и отлаживать проекты.




КОМАНДЫ:
Показать рабочую папку:
pwd - print working directory — показать рабочую папку - выводит путь к текущей директории

Вывести содержимое директории:
ls - Вывести содержимое директории. Cписок обычных файлов в директории
ls -a - Вывести расширенный список. В нём отобразятся все скрытые файлы, которые начинаются с символа . (например, файлы конфигурации). В том числе два особых файла . и .., которые обозначают текущую и родительскую директории.
ls .. - Покажет содержимое родительской директории
ls ~  - Выведет содержимое домашней директории
ls -la - Для просмотра списка всех файлов и папок в текущей директории с детальной информацией -l (long) — показывает подробную информацию : права доступа, владелец, размер, дата изменения и имя файла.
ls -a ~/.ssh -Таким способом можно указать путь к просматрваемым файлам


Сменить директорию:
cd Desktop/mygit- Сменить директорию. Если в названии папки есть пробелы, при вводе нужно использовать кавычки - cd "Фотографии с дня рождения"
cd ~ - Перейти к домашней дирректории
cd .. - Чтобы вернуться в родительскую директорию — то есть на уровень выше
cd . - Чтобы обратиться к текущей директории для использования скриптов

Cоздать файл:
touch file.txt -  Cоздать файл
touch ../../file.txt - Cоздаст файл file.txt на две папки выше по иерархии
touch data.txt table.csv - Создать несколько файлов
touch papka/data.txt papka/table.csv - Указать в какой папке создать файл

Создать дирректорию:
mkdir new-dir - Создание дирректории
mkdir -p dir1/dir-inside/dir-deeper-inside - Можно создать целую структуру директорий одной командой с помощью флага -p.
mkdir ~/my-git-projects создаст папку my-git-projects внутри домашней директории
mkdir ../../newdir - Cоздаст дирректорию newdir на две папки выше по иерархии

Копировать файл:
cp index.html src/ - принимает два параметра: что копируем и куда копируем.
cp index.html style.css script.js src/ - можно указать сразу несколько файлов.
cp data.txt ~ - Cкопировать файл data.txt в домашнюю директорию
cp data.txt .. - Cкопировать файл data.txt на папку выше по иерархии

Перемещение файлов и папок:
mv table.csv ./very-important-files - перенести файл, также как и копирование
mv ../file.txt me.png important-files - Переместить файлы file.txt из родительской директории и me.png из текущей директории в папку important-files в рабочей директории

Чтение файлов:
сat myfile.txt - Прочитать файл
sed -i '$d' .gitignore - Удаление последней строки 

Удаление файлов и папок:
rm example.txt - Удалить файл
rmdir - Удалить папку
rm -r images - Удалить вместе со всем её содержимым. -r рекурсивно, удаление будет последовательно применяться к каждому из элементов в этой папке — пока не сотрёт их все. Затем команда удалит пустую директорию.
rm -rf papka - Удалить папку. -f - ключ избавит вас от вопросов вроде Вы точно хотите удалить этот файл

. - Обратиться к текущей папке в Bash позволяет точка

Лайфхаки:
mkdir second-project && cd second-project && touch index.html style.css - Выполняйте сразу несколько команд, для этого их нужно разделить двумя амперсандами &&
Tab - Терминал покажет список всех команд, которые начинаются с этих символов.
Если ввести cd с названием папки, а затем нажать Tab, в консоль в качестве подсказки выведутся все возможные пути.
Чтобы попасть в корневую директорию Windows, нужно перейти на соответствующий диск. Например, cd c:/ + Enter или cd /c + Enter.
cd ~/Documents - папка Documents хранится в домашней директории

Вывод на экран и запись текста в файл:
echo "Привет!" - Вывод на экран
echo "Вторая строка файла" >> file.txt - Будет добавлен текст в конец файла. Оператор >> — это возможность командной строки (Bash). Его можно использовать не только с echo, но и с любой другой командой, которая выводит что-то на экран.
Одинарный символ > тоже перенаправит вывод команды в файл, но перед этим сотрёт содержимое файла, то есть перезапишет файл целиком.



GIT РЕПОЗИТОРИЙ:

Термины:
repository - Хранилище
initialize - Инициализировать
main - Главная
force - заставить
status — «статус», «состояние»
commit - Коммит — совершать, фиксировать - Фиксация состояния файлов в Git.
untracked files - track — следить, untracked — «неотслеженный», «неотслеживаемый» — Ещё не отслеживаемые файлы 
add — Добавить + all — Всё
-m - message — Cообщение
root-commit — это самый первый, или «корневой» (англ. root), коммит в ветке, у следующих коммитов такой надписи не будет;
2 files changed, 1 insertion(+) - изменились два файла, одна строка была добавлена
create - Cоздать
mode 100644 - сообщает, что это обычный файл 
mode 100755 - для исполняемых файлов (например, что-нибудь.exe) 
mode 120000 - для файлов-ссылок в Linux. Файлы-ссылки не содержат данных сами по себе, а только ссылаются на другие файлы — как «ярлыки» в Windows.
No commits yet - ещё нет коммитов
log — «журнал [записей]»
hub - узловая станция
Open source - открытый исходный код
SSH-ключи - Secure Shell — Безопасная оболочка
SSH - Secure Shell Protocol -сетевой протокол
network protocols - сетевые протоколы
SSH использует пару ключей для обеспечения безопасности — публичный и приватный: 
Приватный ключ (англ. private key) хранится только на вашем компьютере и не должен передаваться кому-либо ещё. Он используется для расшифровки данных.
Публичный ключ (англ. public key) доступен всем и используется для шифрования данных. Они могут быть расшифрованы парным приватным ключом.
git remote add (от англ. remote — «удалённый» и add — «добавить»
origin (англ. «источник») — стандартный псевдоним, с помощью которого можно обращаться к главному удалённому репозиторию (обычно такой репозиторий один). Это значительно упрощает работу.
v — короткая форма флага --verbose (англ. «подробный»). Он позволяет показать больше информации в выводе.
branch - Ветка
push — толкать 
README.md - read — «прочитай» и me — «меня»
Маркда́ун — это специальный язык разметки. Он позволяет красиво отформатировать текстовый документ.
case — «ситуация», «случай»
Хеш — идентификатор коммита
SHA-1 (от англ. Secure Hash Algorithm — «безопасный алгоритм хеширования»
--oneline - одной строкой
Q - Quit — Выйти
HEAD - «голова», «головной» - один из служебных файлов папки .git. Он указывает на коммит, который сделан последним (то есть на самый новый). Если нужно передать последний коммит, то вместо его хеша можно просто написать слово HEAD — Git поймёт, что вы имели в виду последний коммит.
Staging area (от англ. stage — «сцена», «этап [процесса]» и area — «область, Staging area также называют index (англ. «каталог») или cache (англ. «кеш»), а состояние файла staged иногда называют indexed или cached.
Статусы файла - untracked/tracked, staged и modified
nothing to commit, working tree clean - буквально переводится как «нечего коммитить, рабочая директория чиста»
On branch master - сообщает, что текущая ветка — master.
Use git add <file> to include in what will be committed (англ. «используйте git add <file>, чтобы добавить в список на коммит»).
Changes to be committed (англ. «изменения, которые попадут в коммит»)
Changes not staged for commit (англ. «изменения, которые не подготовлены к коммиту»
Conventional Commits - соглашение о коммитах
LGS - cокращение от англ. logistics — «логистика»
feat - cокращение от англ. feature — для новой функциональности;
fix - «исправить», «устранить» — для исправленных ошибок.
Фреймворк (от англ. framework — «каркас», «рама») — это программное обеспечение, которое помогает уменьшить количество кода при создании проектов. Разработчик прописывает в своём коде только нужную функциональность — проект будет работать за счёт того, что уже есть внутри фреймворка.
amend — «исправить», «дополнить»
restore — Восстановить
reset  — «сброс», «обнуление» и hard — «суровый
Amazon Web Services — самый популярный провайдер «облачных сервисов», например виртуальных серверов.
diff - difference — «отличие», «разница»
.gitignore - ignore — игнорировать
tmp- temporary — «временный



Команды:
Работа с файлом настройки .gitconfig:
git config --global user.name "User Namovich" - Имя или ник нужно написать латиницей и в кавычках
git config --global user.email username@yandex.ru - Здесь нужно указать свой настоящий email 
cat ~/.gitconfig - Прочитать настройки .gitconfig
git config --list - Просмотреть настройки 

Инициализация:
git init - Сделать папку репозиторием
rm -rf .git - Разгитить. Удалить папку. -f - ключ избавит вас от вопросов вроде Вы точно хотите удалить этот файл

Состояние/статус:
git status - Показывает текущее состояние репозитория

Подготовить файлы к сохранению:
git add readme.txt- Добавить один файл
git add --all - Позволяет подготовить к сохранению все файлы в репозитории
git add . - Добавить текущую папку целиком

Выполнить коммит:
git commit -m 'Мой первый коммит! - Сделать коммит c ключом -m, который присваивает коммиту сообщение.	

Просмотр истории коммитов:
git log - Просмотреть журнал коммитов
git log --oneline - Получить сокращённый лог

Генерация ключа ssh:
ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" 
ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" другой способ алгоритма шифрования генерации ключа


Cкопировать содержимое в буфер обмена:
clip < ~/.ssh/id_rsa.pub скопировать содержимое ключа в буфер обмена
clip < ~/.ssh/id_ed25519.pub скопировать содержимое ключа в буфер обмена для ed25519

Проверить правильность ключа ssh
ssh -T git@github.com - Проверьте правильность ключа

Привязать удалённый репозиторий к локальному:
git remote add origin git@github.com:viway1/first-project.git - Привязать лок реп к удаленному
git remote -v - Убедиться, что репозитории связаны
git branch -M main - Используется для переименования текущей ветки в main. Это часто применяется, если вы хотите заменить название ветки с master (устаревшее название) на более современное и нейтральное — main.
git push -u origin main - В первый раз эту команду нужно вызвать с флагом -u и параметрами origin (имя удалённого репозитория) и main или master (название текущей ветки). Флаг -u свяжет локальную ветку с одноимённой удалённой.
git push - Загрузить содержимое локального репозитория на GitHub

Исправить коммит:
git commit --amend --no-edit - --amend рассчитан на работу с последним коммитом (HEAD). Дополнить коммит новыми файлами можно с помощью git commit --amend --no-edit. Благодаря опции --no-edit сообщение к коммиту останется таким, каким и было.
git commit --amend -m "текст нового коммита" - Изменить сообщение коммита

Выйти из редактора GNU nano, либо Vim:
Если забыть указать у команды git commit --amend один из флагов (--no-edit или -m), Git предложит отредактировать сообщение коммита вручную. Для этого он откроет текстовый редактор, который установлен в системе по умолчанию. Чаще всего это либо GNU nano, либо Vim.
GNU nano - Первая строка Добавить главную страницу и стили — это текущее сообщение коммита. Если вы хотите изменить сообщение, нужно отредактировать эту строку.
Допустим, решили добавить в конце сообщения восклицательный знак. Чтобы сохранить новое сообщение, нужно нажать Ctrl+X, где X значит exit (англ. «выход»).
💡 В надписях вида ^X, ^G и других «шляпка» ^ обозначает кнопку Ctrl. То есть ^X — это то же самое, что и Ctrl+X. После нажатия Ctrl+X nano предложит сохранить файл, для этого нужно нажать Y (от англ. yes).Затем редактор предложит изменить имя файла, но делать этого не нужно — просто нажмите Enter. После нажатия Enter редактор закроется, а Git изменит сообщение последнего коммита.  Если вы не хотите менять сообщение через редактор, можно выйти из него с помощью Ctrl+X, а затем выбрать N (от англ. no). В таком случае редактор закроется, и Git оставит сообщение последнего коммита «как было».
Vim — великий и ужасный, Если не откроется nano, то, скорее всего, откроется Vim.Если вы ещё не умеете пользоваться Vim, мы рекомендуем сразу выйти из редактора и использовать флаг -m для указания сообщений коммита. Вот как выйти из Vim: Нажмите клавишу Esc. Наберите последовательность символов :qa!. Нажмите Enter. Для запуска учебника на русском языке достаточно выполнить команду vimtutor ru

Откатить изменения:
Откать файл в unstage:
git restore --staged <file> - Убрать файл из staging поможет команда(Выполнить unstage изменений)
git restore --staged . - сбросить» все файлы из staged обратно в untracked/modified, она сбросит всю текущую папку (.).

Откатить» коммит:
git reset --hard <commit hash> - откатить» то, что уже было закоммичено, то есть вернуть состояние репозитория к более раннему
git restore <file> - Откатить» изменения, которые не попали в staging
git restore --source=5b125b4 task.txt - Откатиться до предыдущей версии файла, если файл был закомичен

Просмотреть изменения в файлах:
git diff - Эта команда сравнит последнюю закоммиченную версию файла с текущей (изменённой) версией. команда git diff не показывает изменения в staged-файлах — только в modified.
git diff --staged - Чтобы просмотреть изменения в staged, нужно использовать флаг --staged
git diff 5b125b4 5de7f64 - Между хеш до хеш
git diff ae7f034 head - HEAD указывает на последний коммит
git log -p -- movies.txt - покажет все изменения в файле movies.txt с момента создания репозитория до текущего состояния. Каждый коммит будет сопровождаться его диффом (изменениями).
git show -


Игнорирование файлов в Git - .gitignore:
** - для рекурсивного поиска во всех подпапках, а одна звездочка (*) ограничивается текущей папкой.
# - Комментарий
.DS_Store - В таком случае Git будет игнорировать файлы с именем .DS_Store, причём не только в корне репозитория, но и во всех вложенных папках.
*.jpeg - Игнорировать все файлы, которые заканчиваются на .jpeg
file?.txt - Вопросительный знак ? соответствует одному любому символу. Будут проигнорированы fileA.txt и file1.txt. А вот файл file12.txt не будет проигнорирован, потому что в его названии два символа после file, а не один.
file[0-2].txt - Игнорировать файлы file0.txt, file1.txt и file2.txt, при этом не игнорировать file3.txt, file4.txt, ...В скобках можно либо перечислить символы ([abc]), либо задать диапазон ([a-z]).
/todo.txt - игнорировать todo.txt только в корне репозитория
build/ - игнорировать папку build. Если шаблон заканчивается слешем, то правило применится только к папке.
docs/**/tmp - Игнорировать файлы "docs/current/tmp", "docs/old/tmp", а также "docs/old/saved/a/b/c/d/tmp" и даже "docs/tmp", потому что ноль вложенных папок тоже подходит
docs/*/tmp - Игнорировать только "docs/current/tmp" и "docs/old/tmp", файл "docs/old/saved/a/b/c/d/tmp" не попадает в правило
!doge.jpeg  - Не игнорировать doge.jpeg если есть правило игнорирования *.jpeg
!examples/**/*.log - Не игнорировать *.log файлы в examples, потому что это пример для документации
git status --ignored - Посмотреть, что игнорируется
git check-ignore -v Картинки/123.tex - Получить информацию о том, какое правило .gitignore игнорирует файл 

_Пример как игнорировать все файлы и папки, кроме...___
** - Игнорировать все файлы, кроме тех, что указаны в исключениях
!**/*.txt -Включить .tex в любом месте
!*/ -Разрешить подпапки (важно для вложенных директорий)!*/ — разрешает переход в подпапки , чтобы Git мог видеть файлы внутри них.
Без !*/ правило ** может блокировать доступ к подпапкам, и исключения !**/*.tex не сработают.
-----


